var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",r="color: "+t.color+"; ",a="font-size: "+t.size+"px; ",o="font-weight: "+(t.bold?"bold":"normal")+"; ",i="font-style: "+(t.italic?"italic":"normal")+"; ",s="text-decoration: "+(t.underline?"underline":"none")+"; ",u="background-color: "+t.highlightColor+"; ";return"."+e+" {"+n+r+a+o+i+s+u+"}"}function t(e){for(var t=document.createElement("style"),n=0,r=e.length;r>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,o){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?r(n.fontSetting.font.family,n.fontSetting.font.url,o):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&a(n.fontSetting.font.family,o))})}function r(e,t,n){var r=null,a="font-family: "+e+"; src: url('"+t+"');";n=n||document,r=n.styleSheets[0],null!==r&&r.addRule("@font-face",a)}function a(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}return{getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:r,loadGoogleFont:a}}(),function(){function e(e,t){if(!t||"function"==typeof t)return e;for(var n in t)e[n]=t[n];return e}function t(e,n){for(var r in n)r in e?t(e[r],n[r]):e[r]=n[r];return e}function n(e,t,n){var r,a=0,o=e.length,i=void 0===o||"[object Array]"!==Object.prototype.toString.apply(e)||"function"==typeof e;if(n)if(i){for(r in e)if(t.apply(e[r],n)===!1)break}else for(;o>a&&t.apply(e[a++],n)!==!1;);else if(i){for(r in e)if(t.call(e[r],r,e[r])===!1)break}else for(;o>a&&t.call(e[a],a,e[a++])!==!1;);return e}function r(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,function(e){return B[e]}):e}function a(e){var t=function(e){if(window.XMLHttpRequest)return e(null,new XMLHttpRequest);if(window.ActiveXObject)try{return e(null,new ActiveXObject("Msxml2.XMLHTTP"))}catch(t){return e(null,new ActiveXObject("Microsoft.XMLHTTP"))}return e(new Error)},n=function(e){if("string"==typeof e)return e;var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")},r=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);128>r?t+=String.fromCharCode(r):r>127&&2048>r?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t},a=function(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e=r(e);var n,a,o,i,s,u,l,c="",f=0;do n=e.charCodeAt(f++),a=e.charCodeAt(f++),o=e.charCodeAt(f++),i=n>>2,s=(3&n)<<4|a>>4,u=(15&a)<<2|o>>6,l=63&o,isNaN(a)?u=l=64:isNaN(o)&&(l=64),c+=t.charAt(i)+t.charAt(s)+t.charAt(u)+t.charAt(l),n=a=o="",i=s=u=l="";while(f<e.length);return c},o=function(){for(var e=arguments[0],t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r])}return e},i=function(e,r,a,s){"function"==typeof a&&(s=a,a={}),a.cache=a.cache||!1,a.data=a.data||{},a.headers=a.headers||{},a.jsonp=a.jsonp||!1,a.async=void 0===a.async?!0:a.async;var u,l=o({accept:"*/*","content-type":"application/x-www-form-urlencoded;charset=UTF-8"},i.headers,a.headers);if(u="application/json"===l["content-type"]?JSON.stringify(a.data):n(a.data),"GET"===e){var c=[];if(u&&(c.push(u),u=null),a.cache||c.push("_="+(new Date).getTime()),a.jsonp&&(c.push("callback="+a.jsonp),c.push("jsonp="+a.jsonp)),c=c.join("&"),c.length>1&&(r+=r.indexOf("?")>-1?"&"+c:"?"+c),a.jsonp){var f=document.getElementsByTagName("head")[0],d=document.createElement("script");return d.type="text/javascript",d.src=r,f.appendChild(d),void 0}}t(function(t,n){if(t)return s(t);n.open(e,r,a.async);for(var o in l)l.hasOwnProperty(o)&&n.setRequestHeader(o,l[o]);n.onreadystatechange=function(){if(4===n.readyState){var e=n.responseText||"";if(!s)return;s(n.status,{text:function(){return e},json:function(){try{return JSON.parse(e)}catch(t){return H.error("Can not parse JSON. URL: "+r),{}}}})}},n.send(u)})},s={authBasic:function(e,t){i.headers.Authorization="Basic "+a(e+":"+t)},connect:function(e,t,n){return i("CONNECT",e,t,n)},del:function(e,t,n){return i("DELETE",e,t,n)},get:function(e,t,n){return i("GET",e,t,n)},head:function(e,t,n){return i("HEAD",e,t,n)},headers:function(e){i.headers=e||{}},isAllowed:function(e,t,n){this.options(e,function(e,r){n(-1!==r.text().indexOf(t))})},options:function(e,t,n){return i("OPTIONS",e,t,n)},patch:function(e,t,n){return i("PATCH",e,t,n)},post:function(e,t,n){return i("POST",e,t,n)},put:function(e,t,n){return i("PUT",e,t,n)},trace:function(e,t,n){return i("TRACE",e,t,n)}},u=e.type?e.type.toLowerCase():"get";s[u](e.url,e,function(t,n){200===t||0===t&&n.text()?e.success(n.json(),t,null):e.error(n.text(),t,null)})}function o(e,t){"function"==typeof e&&(t=e,e={}),e=e||{},H.extend(D,e),delete D.fixLng,D.functions&&(delete D.functions,H.extend(H,e.functions)),"string"==typeof D.ns&&(D.ns={namespaces:[D.ns],defaultNs:D.ns}),"string"==typeof D.fallbackNS&&(D.fallbackNS=[D.fallbackNS]),("string"==typeof D.fallbackLng||"boolean"==typeof D.fallbackLng)&&(D.fallbackLng=[D.fallbackLng]),D.interpolationPrefixEscaped=H.regexEscape(D.interpolationPrefix),D.interpolationSuffixEscaped=H.regexEscape(D.interpolationSuffix),D.lng||(D.lng=H.detectLanguage()),F=H.toLanguages(D.lng),T=F[0],H.log("currentLng set to: "+T),D.useCookie&&H.cookie.read(D.cookieName)!==T&&H.cookie.create(D.cookieName,T,D.cookieExpirationTime,D.cookieDomain),D.detectLngFromLocalStorage&&"undefined"!=typeof document&&window.localStorage&&H.localStorage.setItem("i18next_lng",T);var n=L;e.fixLng&&(n=function(e,t){return t=t||{},t.lng=t.lng||n.lng,L(e,t)},n.lng=T),q.setCurrentLng(T),P&&D.setJqueryExt&&v();var r;if(P&&P.Deferred&&(r=P.Deferred()),!D.resStore){var a=H.toLanguages(D.lng);"string"==typeof D.preload&&(D.preload=[D.preload]);for(var o=0,i=D.preload.length;i>o;o++)for(var s=H.toLanguages(D.preload[o]),u=0,l=s.length;l>u;u++)a.indexOf(s[u])<0&&a.push(s[u]);return E.sync.load(a,D,function(e,a){V=a,I=!0,t&&t(n),r&&r.resolve(n)}),r?r.promise():void 0}return V=D.resStore,I=!0,t&&t(n),r&&r.resolve(n),r?r.promise():void 0}function i(e,t){"string"==typeof e&&(e=[e]);for(var n=0,r=e.length;r>n;n++)D.preload.indexOf(e[n])<0&&D.preload.push(e[n]);return o(t)}function s(e,t,n,r){"string"!=typeof t?(n=t,t=D.ns.defaultNs):D.ns.namespaces.indexOf(t)<0&&D.ns.namespaces.push(t),V[e]=V[e]||{},V[e][t]=V[e][t]||{},r?H.deepExtend(V[e][t],n):H.extend(V[e][t],n)}function u(e,t){"string"!=typeof t&&(t=D.ns.defaultNs),V[e]=V[e]||{};var n=V[e][t]||{},r=!1;for(var a in n)n.hasOwnProperty(a)&&(r=!0);return r}function l(e,t){"string"!=typeof t&&(t=D.ns.defaultNs),V[e]=V[e]||{},V[e][t]={}}function c(e,t,n,r){"string"!=typeof t?(resource=t,t=D.ns.defaultNs):D.ns.namespaces.indexOf(t)<0&&D.ns.namespaces.push(t),V[e]=V[e]||{},V[e][t]=V[e][t]||{};for(var a=n.split(D.keyseparator),o=0,i=V[e][t];a[o];)o==a.length-1?i[a[o]]=r:(null==i[a[o]]&&(i[a[o]]={}),i=i[a[o]]),o++}function f(e,t,n){"string"!=typeof t?(resource=t,t=D.ns.defaultNs):D.ns.namespaces.indexOf(t)<0&&D.ns.namespaces.push(t);for(var r in n)"string"==typeof n[r]&&c(e,t,r,n[r])}function d(e){D.ns.defaultNs=e}function g(e,t){p([e],t)}function p(e,t){var n={dynamicLoad:D.dynamicLoad,resGetPath:D.resGetPath,getAsync:D.getAsync,customLoad:D.customLoad,ns:{namespaces:e,defaultNs:""}},r=H.toLanguages(D.lng);"string"==typeof D.preload&&(D.preload=[D.preload]);for(var a=0,o=D.preload.length;o>a;a++)for(var i=H.toLanguages(D.preload[a]),s=0,u=i.length;u>s;s++)r.indexOf(i[s])<0&&r.push(i[s]);for(var l=[],c=0,f=r.length;f>c;c++){var d=!1,g=V[r[c]];if(g)for(var p=0,h=e.length;h>p;p++)g[e[p]]||(d=!0);else d=!0;d&&l.push(r[c])}l.length?E.sync._fetch(l,n,function(n,r){var a=e.length*l.length;H.each(e,function(e,n){D.ns.namespaces.indexOf(n)<0&&D.ns.namespaces.push(n),H.each(l,function(e,o){V[o]=V[o]||{},V[o][n]=r[o][n],a--,0===a&&t&&(D.useLocalStorage&&E.sync._storeLocal(V),t())})})}):t&&t()}function h(e,t,n){return"function"==typeof t?(n=t,t={}):t||(t={}),t.lng=e,o(t,n)}function m(){return T}function y(e){V={},h(T,e)}function v(){function e(e,t,n){if(0!==t.length){var r="text";if(0===t.indexOf("[")){var a=t.split("]");t=a[1],r=a[0].substr(1,a[0].length-1)}t.indexOf(";")===t.length-1&&(t=t.substr(0,t.length-2));var o;if("html"===r)o=D.defaultValueFromContent?P.extend({defaultValue:e.html()},n):n,e.html(P.t(t,o));else if("text"===r)o=D.defaultValueFromContent?P.extend({defaultValue:e.text()},n):n,e.text(P.t(t,o));else if("prepend"===r)o=D.defaultValueFromContent?P.extend({defaultValue:e.html()},n):n,e.prepend(P.t(t,o));else if("append"===r)o=D.defaultValueFromContent?P.extend({defaultValue:e.html()},n):n,e.append(P.t(t,o));else if(0===r.indexOf("data-")){var i=r.substr("data-".length);o=D.defaultValueFromContent?P.extend({defaultValue:e.data(i)},n):n;var s=P.t(t,o);e.data(i,s),e.attr(r,s)}else o=D.defaultValueFromContent?P.extend({defaultValue:e.attr(r)},n):n,e.attr(r,P.t(t,o))}}function t(t,n){var r=t.attr(D.selectorAttr);if(r||"undefined"==typeof r||r===!1||(r=t.text()||t.val()),r){var a=t,o=t.data("i18n-target");if(o&&(a=t.find(o)||t),n||D.useDataAttrOptions!==!0||(n=t.data("i18n-options")),n=n||{},r.indexOf(";")>=0){var i=r.split(";");P.each(i,function(t,r){""!==r&&e(a,r,n)})}else e(a,r,n);D.useDataAttrOptions===!0&&t.data("i18n-options",n)}}P.t=P.t||L,P.fn.i18n=function(e){return this.each(function(){t(P(this),e);var n=P(this).find("["+D.selectorAttr+"]");n.each(function(){t(P(this),e)})})}}function b(e,t,n,r){if(!e)return e;if(r=r||t,e.indexOf(r.interpolationPrefix||D.interpolationPrefix)<0)return e;var a=r.interpolationPrefix?H.regexEscape(r.interpolationPrefix):D.interpolationPrefixEscaped,o=r.interpolationSuffix?H.regexEscape(r.interpolationSuffix):D.interpolationSuffixEscaped,i="HTML"+o,s=t.replace&&"object"==typeof t.replace?t.replace:t;return H.each(s,function(t,s){var u=n?n+D.keyseparator+t:t;"object"==typeof s&&null!==s?e=b(e,s,u,r):r.escapeInterpolation||D.escapeInterpolation?(e=e.replace(new RegExp([a,u,i].join(""),"g"),H.regexReplacementEscape(s)),e=e.replace(new RegExp([a,u,o].join(""),"g"),H.regexReplacementEscape(H.escape(s)))):e=e.replace(new RegExp([a,u,o].join(""),"g"),H.regexReplacementEscape(s))}),e}function x(e,t){var n=",",r="{",a="}",o=H.extend({},t);for(delete o.postProcess;-1!=e.indexOf(D.reusePrefix)&&(M++,!(M>D.maxRecursion));){var i=e.lastIndexOf(D.reusePrefix),s=e.indexOf(D.reuseSuffix,i)+D.reuseSuffix.length,u=e.substring(i,s),l=u.replace(D.reusePrefix,"").replace(D.reuseSuffix,"");if(i>=s)return H.error("there is an missing closing in following translation value",e),"";if(-1!=l.indexOf(n)){var c=l.indexOf(n);if(-1!=l.indexOf(r,c)&&-1!=l.indexOf(a,c)){var f=l.indexOf(r,c),d=l.indexOf(a,f)+a.length;try{o=H.extend(o,JSON.parse(l.substring(f,d))),l=l.substring(0,c)}catch(g){}}}var p=O(l,o);e=e.replace(u,H.regexReplacementEscape(p))}return e}function w(e){return e.context&&("string"==typeof e.context||"number"==typeof e.context)}function S(e){return void 0!==e.count&&"string"!=typeof e.count}function k(e){return void 0!==e.indefinite_article&&"string"!=typeof e.indefinite_article&&e.indefinite_article}function N(e,t){t=t||{};var n=_(e,t),r=C(e,t);return void 0!==r||r===n}function L(e,t){return t=t||{},I?(M=0,O.apply(null,arguments)):(H.log("i18next not finished initialization. you might have called t function before loading resources finished."),t.defaultValue||"")}function _(e,t){return void 0!==t.defaultValue?t.defaultValue:e}function A(){for(var e=[],t=1;t<arguments.length;t++)e.push(arguments[t]);return{postProcess:"sprintf",sprintf:e}}function O(e,t){if(t&&"object"!=typeof t?"sprintf"===D.shortcutFunction?t=A.apply(null,arguments):"defaultValue"===D.shortcutFunction&&(t={defaultValue:t}):t=t||{},"object"==typeof D.defaultVariables&&(t=H.extend({},D.defaultVariables,t)),void 0===e||null===e||""===e)return"";"string"==typeof e&&(e=[e]);var n=e[0];if(e.length>1)for(var r=0;r<e.length&&(n=e[r],!N(n,t));r++);var a,o=_(n,t),i=C(n,t),s=t.lng?H.toLanguages(t.lng,t.fallbackLng):F,u=t.ns||D.ns.defaultNs;n.indexOf(D.nsseparator)>-1&&(a=n.split(D.nsseparator),u=a[0],n=a[1]),void 0===i&&D.sendMissing&&"function"==typeof D.missingKeyHandler&&(t.lng?D.missingKeyHandler(s[0],u,n,o,s):D.missingKeyHandler(D.lng,u,n,o,s));var l=t.postProcess||D.postProcess;void 0!==i&&l&&J[l]&&(i=J[l](i,n,t));var c=o;if(o.indexOf(D.nsseparator)>-1&&(a=o.split(D.nsseparator),c=a[1]),c===n&&D.parseMissingKey&&(o=D.parseMissingKey(o)),void 0===i&&(o=b(o,t),o=x(o,t),l&&J[l])){var f=_(n,t);i=J[l](f,n,t)}return void 0!==i?i:o}function C(e,t){t=t||{};var n,r,a=_(e,t),o=F;if(!V)return a;if("cimode"===o[0].toLowerCase())return a;if(t.lngs&&(o=t.lngs),t.lng&&(o=H.toLanguages(t.lng,t.fallbackLng),!V[o[0]])){var i=D.getAsync;D.getAsync=!1,E.sync.load(o,D,function(e,t){H.extend(V,t),D.getAsync=i})}var s=t.ns||D.ns.defaultNs;if(e.indexOf(D.nsseparator)>-1){var u=e.split(D.nsseparator);s=u[0],e=u[1]}if(w(t)){n=H.extend({},t),delete n.context,n.defaultValue=D.contextNotFound;var l=s+D.nsseparator+e+"_"+t.context;if(r=L(l,n),r!=D.contextNotFound)return b(r,{context:t.context})}if(S(t,o[0])){n=H.extend({lngs:[o[0]]},t),delete n.count,delete n.lng,n.defaultValue=D.pluralNotFound;var c;if(q.needsPlural(o[0],t.count)){c=s+D.nsseparator+e+D.pluralSuffix;var f=q.get(o[0],t.count);f>=0?c=c+"_"+f:1===f&&(c=s+D.nsseparator+e)}else c=s+D.nsseparator+e;if(r=L(c,n),r!=D.pluralNotFound)return b(r,{count:t.count,interpolationPrefix:t.interpolationPrefix,interpolationSuffix:t.interpolationSuffix});if(!(o.length>1))return r;var d=o.slice();if(d.shift(),t=H.extend(t,{lngs:d}),delete t.lng,r=L(s+D.nsseparator+e,t),r!=D.pluralNotFound)return r}if(k(t)){var g=H.extend({},t);delete g.indefinite_article,g.defaultValue=D.indefiniteNotFound;var p=s+D.nsseparator+e+(t.count&&!S(t,o[0])||!t.count?D.indefiniteSuffix:"");if(r=L(p,g),r!=D.indefiniteNotFound)return r}for(var h,m=e.split(D.keyseparator),y=0,v=o.length;v>y&&void 0===h;y++){for(var N=o[y],A=0,R=V[N]&&V[N][s];m[A];)R=R&&R[m[A]],A++;if(void 0!==R){var T=Object.prototype.toString.apply(R);if("string"==typeof R)R=b(R,t),R=x(R,t);else if("[object Array]"!==T||D.returnObjectTrees||t.returnObjectTrees){if(null===R&&D.fallbackOnNull===!0)R=void 0;else if(null!==R)if(D.returnObjectTrees||t.returnObjectTrees){if("[object Number]"!==T&&"[object Function]"!==T&&"[object RegExp]"!==T){var j="[object Array]"===T?[]:{};H.each(R,function(n){j[n]=O(s+D.nsseparator+e+D.keyseparator+n,t)}),R=j}}else D.objectTreeKeyHandler&&"function"==typeof D.objectTreeKeyHandler?R=D.objectTreeKeyHandler(e,R,N,s,t):(R="key '"+s+":"+e+" ("+N+")' returned an object instead of string.",H.log(R))}else R=R.join("\n"),R=b(R,t),R=x(R,t);"string"==typeof R&&""===R.trim()&&D.fallbackOnEmpty===!0&&(R=void 0),h=R}}if(void 0===h&&!t.isFallbackLookup&&(D.fallbackToDefaultNS===!0||D.fallbackNS&&D.fallbackNS.length>0)){if(t.isFallbackLookup=!0,D.fallbackNS.length){for(var P=0,M=D.fallbackNS.length;M>P;P++)if(h=C(D.fallbackNS[P]+D.nsseparator+e,t),h||""===h&&D.fallbackOnEmpty===!1){var I=h.indexOf(D.nsseparator)>-1?h.split(D.nsseparator)[1]:h,$=a.indexOf(D.nsseparator)>-1?a.split(D.nsseparator)[1]:a;if(I!==$)break}}else h=C(e,t);t.isFallbackLookup=!1}return h}function R(){var e,t=D.lngWhitelist||[],n=[];if("undefined"!=typeof window&&!function(){for(var e=window.location.search.substring(1),t=e.split("&"),r=0;r<t.length;r++){var a=t[r].indexOf("=");if(a>0){var o=t[r].substring(0,a);o==D.detectLngQS&&n.push(t[r].substring(a+1))}}}(),D.useCookie&&"undefined"!=typeof document){var r=H.cookie.read(D.cookieName);r&&n.push(r)}if(D.detectLngFromLocalStorage&&"undefined"!=typeof window&&window.localStorage&&n.push(window.localStorage.getItem("i18next_lng")),"undefined"!=typeof navigator){if(navigator.languages)for(var a=0;a<navigator.languages.length;a++)n.push(navigator.languages[a]);navigator.userLanguage&&n.push(navigator.userLanguage),navigator.language&&n.push(navigator.language)}return function(){for(var r=0;r<n.length;r++){var a=n[r];if(a.indexOf("-")>-1){var o=a.split("-");a=D.lowerCaseLng?o[0].toLowerCase()+"-"+o[1].toLowerCase():o[0].toLowerCase()+"-"+o[1].toUpperCase()}if(0===t.length||t.indexOf(a)>-1){e=a;break}}}(),e||(e=D.fallbackLng[0]),e}Array.prototype.indexOf||(Array.prototype.indexOf=function(e){"use strict";if(null==this)throw new TypeError;var t=Object(this),n=t.length>>>0;if(0===n)return-1;var r=0;if(arguments.length>0&&(r=Number(arguments[1]),r!=r?r=0:0!=r&&1/0!=r&&r!=-1/0&&(r=(r>0||-1)*Math.floor(Math.abs(r)))),r>=n)return-1;for(var a=r>=0?r:Math.max(n-Math.abs(r),0);n>a;a++)if(a in t&&t[a]===e)return a;return-1}),Array.prototype.lastIndexOf||(Array.prototype.lastIndexOf=function(e){"use strict";if(null==this)throw new TypeError;var t=Object(this),n=t.length>>>0;if(0===n)return-1;var r=n;arguments.length>1&&(r=Number(arguments[1]),r!=r?r=0:0!=r&&r!=1/0&&r!=-(1/0)&&(r=(r>0||-1)*Math.floor(Math.abs(r))));for(var a=r>=0?Math.min(r,n-1):n-Math.abs(r);a>=0;a--)if(a in t&&t[a]===e)return a;return-1}),"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")});var T,j=this,P=j.jQuery||j.Zepto,E={},V={},M=0,F=[],I=!1,$={};if("undefined"!=typeof module&&module.exports){if(!P)try{P=require("jquery")}catch(W){}P&&(P.i18n=P.i18n||E),module.exports=E}else P&&(P.i18n=P.i18n||E),j.i18n=j.i18n||E;$={load:function(e,t,n){t.useLocalStorage?$._loadLocal(e,t,function(r,a){for(var o=[],i=0,s=e.length;s>i;i++)a[e[i]]||o.push(e[i]);o.length>0?$._fetch(o,t,function(e,t){H.extend(a,t),$._storeLocal(t),n(null,a)}):n(null,a)}):$._fetch(e,t,function(e,t){n(null,t)})},_loadLocal:function(e,t,n){var r={},a=(new Date).getTime();if(window.localStorage){var o=e.length;H.each(e,function(e,i){var s=window.localStorage.getItem("res_"+i);s&&(s=JSON.parse(s),s.i18nStamp&&s.i18nStamp+t.localStorageExpirationTime>a&&(r[i]=s)),o--,0===o&&n(null,r)})}},_storeLocal:function(e){if(window.localStorage)for(var t in e)e[t].i18nStamp=(new Date).getTime(),H.localStorage.setItem("res_"+t,JSON.stringify(e[t]))},_fetch:function(e,t,n){var r=t.ns,a={};if(t.dynamicLoad){var o=function(e,t){n(null,t)};if("function"==typeof t.customLoad)t.customLoad(e,r.namespaces,t,o);else{var i=b(t.resGetPath,{lng:e.join("+"),ns:r.namespaces.join("+")});H.ajax({url:i,success:function(e){H.log("loaded: "+i),o(null,e)},error:function(e,t,n){H.log("failed loading: "+i),o("failed loading resource.json error: "+n)},dataType:"json",async:t.getAsync})}}else{var s,u=r.namespaces.length*e.length;H.each(r.namespaces,function(r,o){H.each(e,function(e,r){var i=function(e,t){e&&(s=s||[],s.push(e)),a[r]=a[r]||{},a[r][o]=t,u--,0===u&&n(s,a)};"function"==typeof t.customLoad?t.customLoad(r,o,t,i):$._fetchOne(r,o,t,i)})})}},_fetchOne:function(e,t,n,r){var a=b(n.resGetPath,{lng:e,ns:t});H.ajax({url:a,success:function(e){H.log("loaded: "+a),r(null,e)},error:function(e,t,n){if(t&&200==t||e&&e.status&&200==e.status)H.error("There is a typo in: "+a);else if(t&&404==t||e&&e.status&&404==e.status)H.log("Does not exist: "+a);else{var o=t?t:e&&e.status?e.status:null;H.log(o+" when loading "+a)}r(n,{})},dataType:"json",async:n.getAsync})},postMissing:function(e,t,n,r,a){var o={};o[n]=r;var i=[];if("fallback"===D.sendMissingTo&&D.fallbackLng[0]!==!1)for(var s=0;s<D.fallbackLng.length;s++)i.push({lng:D.fallbackLng[s],url:b(D.resPostPath,{lng:D.fallbackLng[s],ns:t})});else if("current"===D.sendMissingTo||"fallback"===D.sendMissingTo&&D.fallbackLng[0]===!1)i.push({lng:e,url:b(D.resPostPath,{lng:e,ns:t})});else if("all"===D.sendMissingTo)for(var s=0,u=a.length;u>s;s++)i.push({lng:a[s],url:b(D.resPostPath,{lng:a[s],ns:t})});for(var l=0,c=i.length;c>l;l++){var f=i[l];H.ajax({url:f.url,type:D.sendType,data:o,success:function(){H.log("posted missing key '"+n+"' to: "+f.url);for(var e=n.split("."),a=0,o=V[f.lng][t];e[a];)o=o[e[a]]=a===e.length-1?r:o[e[a]]||{},a++},error:function(){H.log("failed posting missing key '"+n+"' to: "+f.url)},dataType:"json",async:D.postAsync})}},reload:y};var D={lng:void 0,load:"all",preload:[],lowerCaseLng:!1,returnObjectTrees:!1,fallbackLng:["dev"],fallbackNS:[],detectLngQS:"setLng",detectLngFromLocalStorage:!1,ns:"translation",fallbackOnNull:!0,fallbackOnEmpty:!1,fallbackToDefaultNS:!1,nsseparator:":",keyseparator:".",selectorAttr:"data-i18n",debug:!1,resGetPath:"locales/__lng__/__ns__.json",resPostPath:"locales/add/__lng__/__ns__",getAsync:!0,postAsync:!0,resStore:void 0,useLocalStorage:!1,localStorageExpirationTime:6048e5,dynamicLoad:!1,sendMissing:!1,sendMissingTo:"fallback",sendType:"POST",interpolationPrefix:"__",interpolationSuffix:"__",defaultVariables:!1,reusePrefix:"$t(",reuseSuffix:")",pluralSuffix:"_plural",pluralNotFound:["plural_not_found",Math.random()].join(""),contextNotFound:["context_not_found",Math.random()].join(""),escapeInterpolation:!1,indefiniteSuffix:"_indefinite",indefiniteNotFound:["indefinite_not_found",Math.random()].join(""),setJqueryExt:!0,defaultValueFromContent:!0,useDataAttrOptions:!1,cookieExpirationTime:void 0,useCookie:!0,cookieName:"i18next",cookieDomain:void 0,objectTreeKeyHandler:void 0,postProcess:void 0,parseMissingKey:void 0,missingKeyHandler:$.postMissing,shortcutFunction:"sprintf"},B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},U={create:function(e,t,n,r){var a;if(n){var o=new Date;o.setTime(o.getTime()+60*n*1e3),a="; expires="+o.toGMTString()}else a="";r=r?"domain="+r+";":"",document.cookie=e+"="+t+a+";"+r+"path=/"},read:function(e){for(var t=e+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var a=n[r];" "==a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(t))return a.substring(t.length,a.length)}return null},remove:function(e){this.create(e,"",-1)}},z={create:function(){},read:function(){return null},remove:function(){}},H={extend:P?P.extend:e,deepExtend:t,each:P?P.each:n,ajax:P?P.ajax:"undefined"!=typeof document?a:function(){},cookie:"undefined"!=typeof document?U:z,detectLanguage:R,escape:r,log:function(e){D.debug&&"undefined"!=typeof console&&console.log(e)},error:function(e){"undefined"!=typeof console&&console.error(e)},getCountyIndexOfLng:function(e){var t=0;return("nb-NO"===e||"nn-NO"===e||"nb-no"===e||"nn-no"===e)&&(t=1),t},toLanguages:function(e){function t(e){var t=e;if("string"==typeof e&&e.indexOf("-")>-1){var n=e.split("-");t=D.lowerCaseLng?n[0].toLowerCase()+"-"+n[1].toLowerCase():n[0].toLowerCase()+"-"+n[1].toUpperCase()}else t=D.lowerCaseLng?e.toLowerCase():e;return t}var n=this.log,r=[],a=D.lngWhitelist||!1,o=function(e){!a||a.indexOf(e)>-1?r.push(e):n("rejecting non-whitelisted language: "+e)};if("string"==typeof e&&e.indexOf("-")>-1){var i=e.split("-");"unspecific"!==D.load&&o(t(e)),"current"!==D.load&&o(t(i[this.getCountyIndexOfLng(e)]))}else o(t(e));for(var s=0;s<D.fallbackLng.length;s++)-1===r.indexOf(D.fallbackLng[s])&&D.fallbackLng[s]&&r.push(t(D.fallbackLng[s]));return r},regexEscape:function(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")},regexReplacementEscape:function(e){return"string"==typeof e?e.replace(/\$/g,"$$$$"):e},localStorage:{setItem:function(e,t){if(window.localStorage)try{window.localStorage.setItem(e,t)}catch(n){H.log('failed to set value for key "'+e+'" to localStorage.')}}}};H.applyReplacement=b;var G=[["ach","Acholi",[1,2],1],["af","Afrikaans",[1,2],2],["ak","Akan",[1,2],1],["am","Amharic",[1,2],1],["an","Aragonese",[1,2],2],["ar","Arabic",[0,1,2,3,11,100],5],["arn","Mapudungun",[1,2],1],["ast","Asturian",[1,2],2],["ay","Aymará",[1],3],["az","Azerbaijani",[1,2],2],["be","Belarusian",[1,2,5],4],["bg","Bulgarian",[1,2],2],["bn","Bengali",[1,2],2],["bo","Tibetan",[1],3],["br","Breton",[1,2],1],["bs","Bosnian",[1,2,5],4],["ca","Catalan",[1,2],2],["cgg","Chiga",[1],3],["cs","Czech",[1,2,5],6],["csb","Kashubian",[1,2,5],7],["cy","Welsh",[1,2,3,8],8],["da","Danish",[1,2],2],["de","German",[1,2],2],["dev","Development Fallback",[1,2],2],["dz","Dzongkha",[1],3],["el","Greek",[1,2],2],["en","English",[1,2],2],["eo","Esperanto",[1,2],2],["es","Spanish",[1,2],2],["es_ar","Argentinean Spanish",[1,2],2],["et","Estonian",[1,2],2],["eu","Basque",[1,2],2],["fa","Persian",[1],3],["fi","Finnish",[1,2],2],["fil","Filipino",[1,2],1],["fo","Faroese",[1,2],2],["fr","French",[1,2],9],["fur","Friulian",[1,2],2],["fy","Frisian",[1,2],2],["ga","Irish",[1,2,3,7,11],10],["gd","Scottish Gaelic",[1,2,3,20],11],["gl","Galician",[1,2],2],["gu","Gujarati",[1,2],2],["gun","Gun",[1,2],1],["ha","Hausa",[1,2],2],["he","Hebrew",[1,2],2],["hi","Hindi",[1,2],2],["hr","Croatian",[1,2,5],4],["hu","Hungarian",[1,2],2],["hy","Armenian",[1,2],2],["ia","Interlingua",[1,2],2],["id","Indonesian",[1],3],["is","Icelandic",[1,2],12],["it","Italian",[1,2],2],["ja","Japanese",[1],3],["jbo","Lojban",[1],3],["jv","Javanese",[0,1],13],["ka","Georgian",[1],3],["kk","Kazakh",[1],3],["km","Khmer",[1],3],["kn","Kannada",[1,2],2],["ko","Korean",[1],3],["ku","Kurdish",[1,2],2],["kw","Cornish",[1,2,3,4],14],["ky","Kyrgyz",[1],3],["lb","Letzeburgesch",[1,2],2],["ln","Lingala",[1,2],1],["lo","Lao",[1],3],["lt","Lithuanian",[1,2,10],15],["lv","Latvian",[1,2,0],16],["mai","Maithili",[1,2],2],["mfe","Mauritian Creole",[1,2],1],["mg","Malagasy",[1,2],1],["mi","Maori",[1,2],1],["mk","Macedonian",[1,2],17],["ml","Malayalam",[1,2],2],["mn","Mongolian",[1,2],2],["mnk","Mandinka",[0,1,2],18],["mr","Marathi",[1,2],2],["ms","Malay",[1],3],["mt","Maltese",[1,2,11,20],19],["nah","Nahuatl",[1,2],2],["nap","Neapolitan",[1,2],2],["nb","Norwegian Bokmal",[1,2],2],["ne","Nepali",[1,2],2],["nl","Dutch",[1,2],2],["nn","Norwegian Nynorsk",[1,2],2],["no","Norwegian",[1,2],2],["nso","Northern Sotho",[1,2],2],["oc","Occitan",[1,2],1],["or","Oriya",[2,1],2],["pa","Punjabi",[1,2],2],["pap","Papiamento",[1,2],2],["pl","Polish",[1,2,5],7],["pms","Piemontese",[1,2],2],["ps","Pashto",[1,2],2],["pt","Portuguese",[1,2],2],["pt_br","Brazilian Portuguese",[1,2],2],["rm","Romansh",[1,2],2],["ro","Romanian",[1,2,20],20],["ru","Russian",[1,2,5],4],["sah","Yakut",[1],3],["sco","Scots",[1,2],2],["se","Northern Sami",[1,2],2],["si","Sinhala",[1,2],2],["sk","Slovak",[1,2,5],6],["sl","Slovenian",[5,1,2,3],21],["so","Somali",[1,2],2],["son","Songhay",[1,2],2],["sq","Albanian",[1,2],2],["sr","Serbian",[1,2,5],4],["su","Sundanese",[1],3],["sv","Swedish",[1,2],2],["sw","Swahili",[1,2],2],["ta","Tamil",[1,2],2],["te","Telugu",[1,2],2],["tg","Tajik",[1,2],1],["th","Thai",[1],3],["ti","Tigrinya",[1,2],1],["tk","Turkmen",[1,2],2],["tr","Turkish",[1,2],1],["tt","Tatar",[1],3],["ug","Uyghur",[1],3],["uk","Ukrainian",[1,2,5],4],["ur","Urdu",[1,2],2],["uz","Uzbek",[1,2],1],["vi","Vietnamese",[1],3],["wa","Walloon",[1,2],1],["wo","Wolof",[1],3],["yo","Yoruba",[1,2],2],["zh","Chinese",[1],3]],K={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&4>=e%10&&(10>e%100||e%100>=20)?1:2)},5:function(e){return Number(0===e?0:1==e?1:2==e?2:e%100>=3&&10>=e%100?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&4>=e?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&4>=e%10&&(10>e%100||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:7>e?2:11>e?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&20>e?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(10>e%100||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1?0:1)},18:function(e){return Number(1==e?1:2)},19:function(e){return Number(1==e?0:0===e||e%100>1&&11>e%100?1:e%100>10&&20>e%100?2:3)},20:function(e){return Number(1==e?0:0===e||e%100>0&&20>e%100?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)}},q={rules:function(){var e,t={};for(e=G.length;e--;)t[G[e][0]]={name:G[e][1],numbers:G[e][2],plurals:K[G[e][3]]};return t}(),addRule:function(e,t){q.rules[e]=t},setCurrentLng:function(e){if(!q.currentRule||q.currentRule.lng!==e){var t=e.split("-");q.currentRule={lng:e,rule:q.rules[t[0]]}}},needsPlural:function(e,t){var n,r=e.split("-");return n=q.currentRule&&q.currentRule.lng===e?q.currentRule.rule:q.rules[r[H.getCountyIndexOfLng(e)]],n&&n.numbers.length<=1?!1:1!==this.get(e,t)},get:function(e,t){function n(t,n){var r;if(r=q.currentRule&&q.currentRule.lng===e?q.currentRule.rule:q.rules[t]){var a;a=r.noAbs?r.plurals(n):r.plurals(Math.abs(n));var o=r.numbers[a];return 2===r.numbers.length&&1===r.numbers[0]&&(2===o?o=-1:1===o&&(o=1)),o}return 1===n?"1":"-1"}var r=e.split("-");return n(r[H.getCountyIndexOfLng(e)],t)}},J={},X=function(e,t){J[e]=t},Q=function(){function e(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function t(e,t){for(var n=[];t>0;n[--t]=e);return n.join("")}var n=function(){return n.cache.hasOwnProperty(arguments[0])||(n.cache[arguments[0]]=n.parse(arguments[0])),n.format.call(null,n.cache[arguments[0]],arguments)};return n.format=function(n,r){var a,o,i,s,u,l,c,f=1,d=n.length,g="",p=[];for(o=0;d>o;o++)if(g=e(n[o]),"string"===g)p.push(n[o]);else if("array"===g){if(s=n[o],s[2])for(a=r[f],i=0;i<s[2].length;i++){if(!a.hasOwnProperty(s[2][i]))throw Q('[sprintf] property "%s" does not exist',s[2][i]);a=a[s[2][i]]}else a=s[1]?r[s[1]]:r[f++];if(/[^s]/.test(s[8])&&"number"!=e(a))throw Q("[sprintf] expecting number but found %s",e(a));switch(s[8]){case"b":a=a.toString(2);break;case"c":a=String.fromCharCode(a);break;case"d":a=parseInt(a,10);break;case"e":a=s[7]?a.toExponential(s[7]):a.toExponential();break;case"f":a=s[7]?parseFloat(a).toFixed(s[7]):parseFloat(a);break;case"o":a=a.toString(8);break;case"s":a=(a=String(a))&&s[7]?a.substring(0,s[7]):a;break;case"u":a=Math.abs(a);break;case"x":a=a.toString(16);break;case"X":a=a.toString(16).toUpperCase()}a=/[def]/.test(s[8])&&s[3]&&a>=0?"+"+a:a,l=s[4]?"0"==s[4]?"0":s[4].charAt(1):" ",c=s[6]-String(a).length,u=s[6]?t(l,c):"",p.push(s[5]?a+u:u+a)}return p.join("")},n.cache={},n.parse=function(e){for(var t=e,n=[],r=[],a=0;t;){if(null!==(n=/^[^\x25]+/.exec(t)))r.push(n[0]);else if(null!==(n=/^\x25{2}/.exec(t)))r.push("%");else{if(null===(n=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(t)))throw"[sprintf] huh?";if(n[2]){a|=1;var o=[],i=n[2],s=[];if(null===(s=/^([a-z_][a-z_\d]*)/i.exec(i)))throw"[sprintf] huh?";for(o.push(s[1]);""!==(i=i.substring(s[0].length));)if(null!==(s=/^\.([a-z_][a-z_\d]*)/i.exec(i)))o.push(s[1]);else{if(null===(s=/^\[(\d+)\]/.exec(i)))throw"[sprintf] huh?";o.push(s[1])}n[2]=o}else a|=2;if(3===a)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";r.push(n)}t=t.substring(n[0].length)}return r},n}(),Y=function(e,t){return t.unshift(e),Q.apply(null,t)};X("sprintf",function(e,t,n){return n.sprintf?"[object Array]"===Object.prototype.toString.apply(n.sprintf)?Y(e,n.sprintf):"object"==typeof n.sprintf?Q(e,n.sprintf):e:e}),E.init=o,E.setLng=h,E.preload=i,E.addResourceBundle=s,E.hasResourceBundle=u,E.addResource=c,E.addResources=f,E.removeResourceBundle=l,E.loadNamespace=g,E.loadNamespaces=p,E.setDefaultNamespace=d,E.t=L,E.translate=L,E.exists=N,E.detectLanguage=H.detectLanguage,E.pluralExtensions=q,E.sync=$,E.functions=H,E.lng=m,E.addPostProcessor=X,E.options=D}(),"undefined"!=typeof angular&&(angular.module("risevision.widget.weather.config",[]).value("current","https://s3.amazonaws.com/widget-weather/0.1.0/dist/current.html").value("threeDay","https://s3.amazonaws.com/widget-weather/0.1.0/dist/three-day.html").value("currentAndThreeDay","https://s3.amazonaws.com/widget-weather/0.1.0/dist/current-and-three-day.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")),"undefined"==typeof config)var config={urlByName:decodeURI(decodeURIComponent("%68%74%74%70%3a%2f%2f%77%77%77%2e%74%69%6e%62%75%77%65%61%74%68%65%72%2e%63%6f%6d%2f%77%78%5f%66%65%65%64%2f%77%78%5f%63%75%72%72%65%6e%74%5f%65%78%74%65%6e%64%65%64%5f%62%79%5f%6e%61%6d%65%2e%70%68%70%3f%70%61%73%73%63%6f%64%65%3d%72%69%73%65%64%69%73%70%6c%61%79%25%37%43%64%6b%61%63%26%6d%65%74%72%69%63%3d%66%61%6c%73%65")),urlByLocation:decodeURI(decodeURIComponent("%68%74%74%70%3a%2f%2f%77%77%77%2e%74%69%6e%62%75%77%65%61%74%68%65%72%2e%63%6f%6d%2f%77%78%5f%66%65%65%64%2f%77%78%5f%63%75%72%72%65%6e%74%5f%65%78%74%65%6e%64%65%64%5f%62%79%5f%6c%61%74%6c%6f%6e%2e%70%68%70%3f%70%61%73%73%63%6f%64%65%3d%72%69%73%65%64%69%73%70%6c%61%79%25%37%43%64%6b%61%63%26%6d%65%74%72%69%63%3d%66%61%6c%73%65"))};
var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather=function(e,t,n){"use strict";function r(){var n=d.address,r=null,o=null,i=null;"geolocation"===n?(r=new RiseVision.Weather.Geolocation(t),r.getWeather({success:a,error:u})):"display"===n?(o=new RiseVision.Weather.DisplayAddress(e),o.getWeather({success:a,error:u})):"custom"===n&&(i=new RiseVision.Weather.CustomAddress(t),i.getWeather(d.customAddress,{success:a,error:u}))}function a(e){var t="",a=null,s=null,u="",f="",p=0,h=0,m=!1,v=!1,b=null,x=[],w="",S=(new Date).getDay()+1,k=S+1>7?1:S+1,N=k+1>7?1:k+1;e?e.getElementsByTagName("cw_error").length>0?o():($(".container").show(),$(".error").hide(),n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){if($(".container").i18n(),$.each(e.getElementsByTagName("observation"),function(e,n){return 0!==e&&(t=n.getAttribute("icon_name"),null!==t&&"cw_no_report_icon"!==t)?(a=this,!1):void 0}),null===a&&(a=e.getElementsByTagName("observation").length>1?e.getElementsByTagName("observation")[1]:e.getElementsByTagName("observation")[0]),a&&"three-day"!==d.layout&&(a.getAttribute("icon_name")?(i(a.getAttribute("icon_name"),$(".current-icon")),$(".current-icon").attr("title",a.getAttribute("description"))):$(".current-icon").hide(),$(".current-temp").html("celsius"===d.unit?l(a.getAttribute("temperature"))+"&#176;C":l(a.getAttribute("temperature"))+"&#176;F")),"custom"===d.description?($(".address").text(d.customDescription),m=!0):"service"===d.description&&(s=e.getElementsByTagName("location")[0],s&&(u=s.getAttribute("city_name"),s.getAttribute("state_name")&&(u+=", "+s.getAttribute("state_name")),$(".address").text(u),m=!0)),a&&(d.showHumidity?(f=n.t("weather."+a.getAttribute("wind_short")),isNaN(a.getAttribute("humidity"))||$(".humidity").text(n.t("weather.humidity")+" "+a.getAttribute("humidity")+"%"),"mph"===d.windSpeed?a.getAttribute("wind_short")&&a.getAttribute("wind_speed")&&$(".wind").text(n.t("weather.wind")+" "+f+" "+n.t("weather.at")+" "+parseInt(a.getAttribute("wind_speed"))+" "+n.t("common.units.mph"),10):"kph"===d.windSpeed&&a.getAttribute("wind_short")&&a.getAttribute("wind_speed")&&(p=parseInt(a.getAttribute("wind_speed"),10),h=Math.round(1.609344*p),$(".wind").text(n.t("weather.wind")+" "+f+" "+n.t("weather.at")+" "+h+" "+n.t("common.units.kph"))),v=!0):$(".humidity-wind").hide()),m||v||$(".info").hide(),b=e.getElementsByTagName("forecast")){if("current"!==d.layout)for(var o=0;o<b.length;o++)w=parseInt(b[o].getAttribute("day_of_week"),10),w===S?x[0]=b[o]:w===k?x[1]=b[o]:w===N&&(x[2]=b[o]);$(".icon").each(function(e){x[e].getAttribute("icon_name")?(i(x[e].getAttribute("icon_name"),$(this)),$(this).attr("title",x[e].getAttribute("description"))):$(this).hide()}),$(".day-of-week").each(function(e){$(this).html(n.t("common."+x[e].getAttribute("weekday").toLowerCase()))}),$(".forecast-temp").each(function(e){$(this).html(l(x[e].getAttribute("high_temp"))+"&#176; / "+l(x[e].getAttribute("low_temp"))+"&#176;")})}setTimeout(function(){r()},y)})):o(),g&&(g=!1,c())}function o(){g&&($(".container").hide(),$(".error").text(n.t("weather.errors.no-data")).show()),setTimeout(function(){r()},v)}function i(e,t){var n=new Image,r="img/"+e+".png";n.onload=function(){t.attr("src",r),s()},n.onerror=function(){console.log("Image "+e+" not found on "+new Date+" for "+$(".address").text()),s()},n.src=r}function s(){p++,"current"===d.layout?1===p&&$(document).trigger("dataPopulated"):"three-day"===d.layout?3===p&&$(document).trigger("dataPopulated"):"current-and-three-day"===d.layout?4===p&&$(document).trigger("dataPopulated"):$(document).trigger("dataPopulated")}function u(e){e.length>0&&(console.log("Unable to connect to the weather service at "+new Date+". Please check your Internet connection."),setTimeout(function(){r()},v))}function l(e){return"celsius"===d.unit?parseInt(5*(e-32)/9,10):parseInt(e,10)}function c(){e.rpc.call("","rsevent_ready",null,h.getString("id"),!0,!0,!0,!0,!0)}function f(e,t){if(Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(t)&&t.length>0){d=JSON.parse(t[0]);var a=[{"class":"current-temp",fontSetting:d.currentTempFont},{"class":"forecast-temp",fontSetting:d.forecastTempFont},{"class":"day-of-week",fontSetting:d.forecastDayFont},{"class":"address",fontSetting:d.addressFont},{"class":"humidity-wind",fontSetting:d.humidityFont}];m.loadFonts(a),document.body.style.background=d.background.color,$(".container").width(h.getInt("rsW")).height(h.getInt("rsH")),d.terms||($(".container").hide(),$(".error").text(n.t("weather.errors.no-terms")).show(),c()),r()}}var d,g=!0,p=0,h=new e.Prefs,m=RiseVision.Common.Utilities,y=18e5,v=6e4;return{setParams:f}}(gadgets,config,i18n);var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.Provider={},RiseVision.Weather.Provider=function(){"use strict";function e(e,t){var n={};n[gadgets.io.RequestParameters.CONTENT_TYPE]=gadgets.io.ContentType.DOM,gadgets.io.makeRequest(e,function(e){e&&e.data?t&&t.success&&"function"==typeof t.success&&t.success(e.data):e&&e.errors&&t&&t.error&&"function"==typeof t.error&&t.error(e.errors)},n)}return{getWeather:e}}();var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.Geolocation=function(e){"use strict";function t(r){var a="";navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(t){a=e.urlByLocation+"&lat="+t.coords.latitude+"&lon="+t.coords.longitude+"&dummy="+Math.ceil(100*Math.random()),RiseVision.Weather.Provider.getWeather(a,{success:function(e){r&&r.success&&"function"==typeof r.success&&r.success(e)},error:function(e){r&&r.error&&"function"==typeof r.error&&r.error(e)}})},function(){setTimeout(function(){t()},n),console.log("Unable to obtain geolocation position.")})}var n=6e4;return{getWeather:t}};var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.DisplayAddress=function(e){"use strict";function t(e,t){var n="",a="";Array.isArray(e)&&e.length>0&&"displayAddress"===e[0]&&(Array.isArray(t)&&t.length>0&&(a=JSON.parse(t[0]),n=n+"&name="+encodeURIComponent(a.city+","+a.province)+"&dummy="+Math.ceil(100*Math.random())),RiseVision.Weather.Provider.getWeather(n,{success:function(e){r&&r.success&&"function"==typeof r.success&&r.success(e)},error:function(e){r&&r.error&&"function"==typeof r.error&&r.error(e)}}))}function n(n){var a=(new e.Prefs).getString("id");r=n,a&&""!==a&&(e.rpc.register("rsparam_set_"+a,t),e.rpc.call("","rsparam_get",null,a,["displayAddress"]))}var r=null;return{getWeather:n}};var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.CustomAddress=function(e){"use strict";function t(t,n){var r="";""!==t&&(r=e.urlByName+"&name="+encodeURIComponent(t)+"&dummy="+Math.ceil(100*Math.random()),RiseVision.Weather.Provider.getWeather(r,{success:function(e){n&&n.success&&"function"==typeof n.success&&n.success(e)},error:function(e){n&&n.error&&"function"==typeof n.error&&n.error(e)}}))}return{getWeather:t}},function(e,t,n){"use strict";var r=new n.Prefs,a=r.getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},n.rpc.register("rsparam_set_"+a,RiseVision.Weather.setParams),n.rpc.call("","rsparam_get",null,a,["additionalParams"])}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-12"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,